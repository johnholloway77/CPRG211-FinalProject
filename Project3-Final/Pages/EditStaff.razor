@* Edit page for object instance of Staff
    An object of type Staff is passed to this page from the StaffPage and assigned to staffToEdit.
    The table on this page has its fields bound to the various fields for the object instannce using @Bind-Value

    If the user clicks on the "Update" button, the various validation methods are used before an SQL query is use to update the database. After completing this or when the user clicks "Cancle", the respective LoadFromDatabase() method is run and the NavigationManager navHelper is used to move the user back the the main StaffPage.

    Date: 27 April 2023
    By: John Holloway
*@

@page "/editstaff"

@using Project3_Final.Services;
@using Project3_Final.Models;


@inject NavigationManager navHelper

<h3>Edit Staff Member</h3>



<table class="table">
    <thead>
        <tr>
            <th>Field</th>
            <th>Value</th>
        </tr>
    </thead>
    <tbody>

        <tr>
            <td>First name</td>
            <td><input type="text" @bind="@staffToEdit.FirstName" /></td>

        </tr>
        <tr>
            <td>Last name</td>
            <td><input type="text" @bind="@staffToEdit.LastName" /></td>
        </tr>
        <tr>
            <td>Phone Number</td>
            <td><input type="text" @bind="@staffToEdit.PhoneNumber" maxlength="10" /></td>
        </tr>
        <tr>
            <td>Email</td>
            <td><input type="email" @bind="@staffToEdit.Email" /></td>
        </tr>
        <tr>
            <td>Salary</td>
            <td><InputNumber @bind-Value="@staffToEdit.Salary" /></td>
        </tr>
        <tr>
            <td>Gym Location</td>
            <td>
                <InputSelect @bind-Value="@staffToEdit.GymID">
                    @foreach(Gym gym in Services.GymService.gyms)
                    {
                        <option value=@gym.GymID>@gym.Street @gym.City</option>
                    }
                </InputSelect>
            </td>
        </tr>
        <tr>
            <td>Position</td>
            <td><InputText @bind-Value="@staffToEdit.Position" /></td>
        </tr>

        <tr>
            <td>Employment Status</td>
            <td>
                <InputSelect @bind-Value="@staffToEdit.AccountStatus">
                    <option value=true>Active</option>
                    <option value=false>Inactive</option>
                </InputSelect>
            </td>
        </tr>
    </tbody>
</table>

<br />
<btn class="btn btn-primary" @onclick="dataValidation">Update</btn>&nbsp&nbsp&nbsp
<btn class="btn btn-primary" @onclick="() => Cancle()">Cancle</btn>




@code {

    internal static Staff staffToEdit;


    //validate that fields are entered to update Staff member.
    internal void dataValidation()
    {
        bool validStaff = true;
        long x;
        int y;
        string alertMessage = "";

        if (string.IsNullOrWhiteSpace(staffToEdit.FirstName))
        {
            validStaff = false;
            alertMessage += "Firstname Required";
        }
        if (string.IsNullOrWhiteSpace(staffToEdit.LastName))
        {
            validStaff = false;
            alertMessage += "\nLastname Required";
        }
        if (string.IsNullOrWhiteSpace(staffToEdit.PhoneNumber))
        {
            validStaff = false;
            alertMessage += "\nPhone number required.";
        }
        if (staffToEdit.PhoneNumber.Length < 10)
        {
            validStaff = false;
            alertMessage += "\nPhone number must contain 10 digits";
        }
        if (!long.TryParse(staffToEdit.PhoneNumber, out x))
        {
            validStaff = false;
            alertMessage += "\nPhone number can only contain numerical values";
        }
        if (string.IsNullOrWhiteSpace(staffToEdit.Email))
        {
            validStaff = false;
            alertMessage += "\nEmail address required.";
        }
        if (staffToEdit.Salary == null)
        {
            validStaff = false;
            alertMessage += "\nSalary required.";
        }
        if(string.IsNullOrWhiteSpace(staffToEdit.Position))
        {
            validStaff = false;
            alertMessage += "\nPosition required.";
        }
        if (validStaff)
        {
            updateStaff();
        }
        else
        {
            Application.Current.MainPage.DisplayAlert("Error, cannot update staff member", alertMessage, "Okay");
        }
    }

    internal void updateStaff()
    {

        Services.StaffServices.UpdateRecord(staffToEdit.StaffID, staffToEdit.GymID, staffToEdit.FirstName, staffToEdit.LastName, staffToEdit.PhoneNumber, staffToEdit.Email, staffToEdit.Salary, staffToEdit.Position, staffToEdit.AccountStatus);

        Application.Current.MainPage.DisplayAlert("Note:", $"Staff record updated for {staffToEdit.FirstName} {staffToEdit.LastName}", "Okay");

        navHelper.NavigateTo("staff");
    }

    internal void Cancle()
    {
        Services.StaffServices.LoadFromDatabase();
        navHelper.NavigateTo("staff");
    }

}
