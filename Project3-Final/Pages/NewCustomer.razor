@* Page for creating new instance of object Customer
    
    This page has instance variables for the arguments needed to create an instance of Customer.
    The table on this page has its fields bound to the various isntance variables that will be used to create the new Customer using @Bind-Value

    The primary key for this object, custID, is autogenerated to ensure that it is unique. 

    If the user clicks on the "Create" button, the various validation methods are used before an SQL query is use to update the database. After completing this or when the user clicks "Cancle", the respective LoadFromDatabase() method is run and the NavigationManager navHelper is used to move the user back the the main CustomerPage.

    Date: 27 April 2023
    By: John Holloway
*@

@page "/newcustomer"

@using Project3_Final.Services;
@using Project3_Final.Models;

@inject NavigationManager navHelper

<h3>Create New Customer</h3>



<table class="table">
    <thead>
        <tr>
            <th>Field</th>
            <th>Value</th>
        </tr>
    </thead>
    <tbody>
        <tr>
            <td>Account Number</td>
            <td>@custID</td>
        </tr>
        <tr>
            <td>First name</td>
            <td><input type="text" @bind="@firstName" /></td>

        </tr>
        <tr>
            <td>Last name</td>
            <td><input type="text" @bind="@lastName" /></td>
        </tr>
        <tr>
            <td>Phone Number</td>
            <td><input type="text" @bind="@phoneNumber" maxlength="10" /></td>
        </tr>
        <tr>
            <td>Email</td>
            <td><input type="email" @bind="@email" /></td>
        </tr>
        <tr>
            <td>Birthday</td>
            <td><InputDate @bind-Value="dateOfBirth" />
                </td>
        </tr>
        <tr>
            <td>Membership Type</td>
            <td>
                <InputSelect @bind-Value="@membershipType">
                    <option value="Annual">Annual</option>
                    <option value="Monthly">Monthly</option>
                    <option value="Trial" selected>30-Day - Trial</option>
                </InputSelect>
            </td>
        </tr>
        <tr>
            <td>Account Status</td>
            <td>
                <InputSelect @bind-Value="@accountStatus">
                    <option value=true selected>Active</option>
                    <option value=false>Inactive</option>
                </InputSelect>
            </td>
        </tr>

        <br />
        <btn class="btn btn-primary" @onclick="dataValidation">Create</btn>
        &nbsp&nbsp&nbsp
        <btn class="btn btn-primary" @onclick="() => Cancle()">Cancle</btn>

    </tbody>
</table>


@code {
    private int custID = Services.CustomerServices.customers.Count + 1;
    private string firstName;
    private string lastName;
    private string phoneNumber = "";
    private string email;
    private DateTime dateOfBirth = DateTime.Today;
    private string membershipType = "Trial";
    private bool accountStatus = true;

    internal void dataValidation()
    {
        bool validCustomer = true;
        long x;
        string alertMessage = "";

        if (string.IsNullOrWhiteSpace(firstName))
        {
            validCustomer = false;
            alertMessage += "Firstname Required";
        }
        if (string.IsNullOrWhiteSpace(lastName))
        {
            validCustomer = false;
            alertMessage += "\nLastname Required";
        }
        if (string.IsNullOrWhiteSpace(phoneNumber))
        {
            validCustomer = false;
            alertMessage += "\nPhone number required.";
        }
        if (phoneNumber.Length < 10)
        {
            validCustomer = false;
            alertMessage += "\nPhone number must contain 10 digits";
        }
        if (!long.TryParse(phoneNumber, out x))
        {
            validCustomer = false;
            alertMessage += "\nPhone number can only contain numerical values";
        }
        if (string.IsNullOrWhiteSpace(email))
        {
            validCustomer = false;
            alertMessage += "\nEmail address required.";
        }
        if (string.IsNullOrEmpty(membershipType))
        {
            validCustomer = false;
            alertMessage += "\nMembership Type required";
        }


        if (validCustomer)
        {
            addCustomer();
        }
        else
        {
            Application.Current.MainPage.DisplayAlert("Error, cannot create customer", alertMessage, "Okay");
        }
    }

    internal void addCustomer()
    {
        Services.CustomerServices.AddToDatabase(custID, firstName, lastName, phoneNumber, email, dateOfBirth, membershipType, accountStatus);

        Application.Current.MainPage.DisplayAlert("Success!", $"Customer record added for {firstName} {lastName}", "Okay");

        Services.CustomerServices.LoadFromDatabase();
        navHelper.NavigateTo("customer");
    }

    internal void Cancle()
    {
        Services.CustomerServices.LoadFromDatabase();
        navHelper.NavigateTo("customer");
    }
}
